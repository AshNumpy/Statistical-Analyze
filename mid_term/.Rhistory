library(readxl)#Excel verilerini base harici çekebileceğimiz bir paket
veriler <- read_excel("C:/Users/lenovo/Documents/GitHub/Statistical-Analyze/datasets/dataset_ex.xlsx")
library(readr)
dataset_ex <- read_delim("~/GitHub/Statistical-Analyze/datasets/dataset_ex.csv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(dataset_ex)
knitr::opts_chunk$set(echo = TRUE)
library(readr)  #verilerimizi çekmek için kullandığımız paket
dataset_ex <- read_delim("~/GitHub/Statistical-Analyze/datasets/dataset_ex.csv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
dataset_ex[sample(dataset_ex,300),]
data_sample <- dataset_ex[sample(dataset_ex,300),replace=F]
data_sample <- dataset_ex[sample(nrow(dataset_ex),300),replace=F]
data_sample
library(writexl) #örneklemimizi dışa aktarmak için kullandığımız paket
write_xlsx(data_sample, "C:\\Users\\lenovo\\Documents\\GitHub\\Statistical-Analyze\\datasets\\data_sample.xlsx")
#9.3 tabulating:
table(data_sample)
View(data_sample)
#9.4 stats:
summary(data_sample)
summary(table(data_sample$MntWines,data_sample$MntFruits))
#9.3 tabulating:
table(data_sample$Income,data_sample$Education)
#9.3 tabulating:
head(table(data_sample$Income,data_sample$Education))
library(dplyr)  #verileri manipüle edebilmek için kullandık
library(dplyr)  #verileri manipüle edebilmek için kullandık
data_sample %>%
mutate(kid_var_yok = if(Kidhome=T))
#9.5 quantile:
#Bir f kesri verildiğinde, verilerinizin karşılık gelen niceliğini bilmek istersiniz. Yani, x gözlemini, x'in altındaki gözlemlerin kesri f olacak şekilde arıyorsunuz.
quntile(data_sample)
#9.5 quantile:
#Bir f kesri verildiğinde, verilerinizin karşılık gelen niceliğini bilmek istersiniz. Yani, x gözlemini, x'in altındaki gözlemlerin kesri f olacak şekilde arıyorsunuz.
quntile(data_sample$Income)
#9.5 quantile:
#Bir f kesri verildiğinde, verilerinizin karşılık gelen niceliğini bilmek istersiniz. Yani, x gözlemini, x'in altındaki gözlemlerin kesri f olacak şekilde arıyorsunuz.
quantile(data_sample$Income)
count(data_sample$Income)
data_sample <- as.numeric(data_sample$Income)
count(data_sample$Income)
count(data_sample$income)
set.seed(300) #kodu her çalıştırdığımızda örneklemimizin değişmemesi için kullandığımız bir fonksiyon
data_sample <- dataset_ex[sample(nrow(dataset_ex),300),replace=F]
head(data_sample, 3)
data_sample <- dataset_ex[sample(nrow(dataset_ex),300),replace=F]
data_sample
set.seed(300) #kodu her çalıştırdığımızda örneklemimizin değişmemesi için kullandığımız bir fonksiyon
data_sample <- dataset_ex[sample(nrow(dataset_ex),300),replace=F]
data_sample
count(data_sample)
nrow(data_sample$Income)
View(data_sample)
total=0
for(i in data_sample$Income){
if(i=NA || i = NULL){
total=total+1
}
else{
next
}
}
total=0
for(i in data_sample$Income){
if(i=NA || i = NULL){
total=total+1
}
else{
next
}
}
}
total=0
for(i in data_sample$Income){
if(i=NA){
total=total+1
}
else{
next
}
}
total=0
for(i in data_sample$income){
if(i=NA){
total=total+1
}
else{
next
}
}
total=0
for(i in data_sample$Income){
if(i=NA){
total=total+1
}
}
total=0
for(i in data_sample$Income){
if(i=NA){
total=total+1
}
else
next
}
total=0
for (i in data_sample$Income){
if(i = NULL){
total=total+1
}
}
library(readxl)
veri <- read_excel("C:\Users\lenovo\Documents\GitHub\Statistical-Analyze\datasets\data_sample.xlsx")
library(readxl)
veri <- read_excel("C:/Users/lenovo/Documents/GitHub/Statistical-Analyze/datasets/data_sample.xlsx")
total=0
for (i in veri$Income){
if(i=NA){
total=total+1
}
}
for (i in veri$Income){
if(i==NA){
total=total+1
}
}
for (i in veri$Income){
if(i==F){
total=total+1
}
}
data_sample %>%
replace(list(is.na(Income))=0)
data_sample %>%
replace(list(is.na(Income))==0)
rm(veri)
rm(i)
rm(total)
data_sample[is.na(d)] <- mean(data_sample$Income)
data_sample$Income[is.na(data_sample$Income)] <- mean(data_sample$Income)
#9.5 quantile:
#Bir f kesri verildiğinde, verilerinizin karşılık gelen niceliğini bilmek istersiniz. Yani, x gözlemini, x'in altındaki gözlemlerin kesri f olacak şekilde arıyorsunuz.
quantile(data_sample$Income])
#9.5 quantile:
#Bir f kesri verildiğinde, verilerinizin karşılık gelen niceliğini bilmek istersiniz. Yani, x gözlemini, x'in altındaki gözlemlerin kesri f olacak şekilde arıyorsunuz.
quantile(data_sample$Income)
#9.5 quantile:
#Bir f kesri verildiğinde, verilerinizin karşılık gelen niceliğini bilmek istersiniz. Yani, x gözlemini, x'in altındaki gözlemlerin kesri f olacak şekilde arıyorsunuz.
quantile(data_sample$Income, na.rm=T)
?z.test
??z.test
?t.test
#9.9 Forming a Confidence Interval for a Mean:
#n<30 olabilmesi için 30 örneklem çekip ortalamaya göre güven aralığı bulduk
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
t.test(data_sample_30)
View(dataset_ex)
removecol(c("data_sample$Education, data_sample$Marital_Status"))
?removecol
select(c("data_sample$Education, data_sample$Marital_Status"))
select(c("data_sample$Education, data_sample$Marital_Status"),-1)
select(data_sample$Education,-1)
select(data_sample_30, -c(Education, Marital_Status, Dt_Custome))
select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30)
data_sample_30
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl)
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl)
data_sample_30
set.seed(30)
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl)
data_sample_30
set.seed(30)
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl)
set.seed(30)
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
data_sample_30_dbl
set.seed(30)
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
data_sample_30_dbl
set.seed(30)
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
data_sample_30_dbl
data_sample$Income[is.na(data_sample$Income)] <- mean(data_sample$Income)
set.seed(30)
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
data_sample_30_dbl
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl)
set.seed(30)
data_sample_30 <- data_sample[sample(nrow(data_sample),30),]
data_sample_30_dbl <- select(data_sample_30, -c(Education, Marital_Status, Dt_Customer))
data_sample_30_dbl
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl)
?prop.test
#9.11 Testing a proportion:
prop.test(data_sample, 300, p=0.5)
data_sample
#9.11 Testing a proportion:
prop.test(data_sample, count(data_sample), p=0.5)
#9.11 Testing a proportion:
prop.test(data_sample$Income, count(data_sample), p=0.5)
#9.11 Testing a proportion:
prop.test(data_sample, 300, p=0.05)
count(data_sample)
data_sample[Income>50000,]
data_sample[data_sample$Income>50000,]
?prop.test
prop.test(count(data_sample$Income), 300, p=0.5, alternative = "greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(data_sample$Income, 300, p=0.5, alternative = "greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(173, 300, p=0.5, alternative = "greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(data_sample[data_sample$Income>50000], data_sample$Income , p=0.5, alternative = "greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(data_sample[data_sample$Income>50000,], data_sample$Income , p=0.5, alternative = "greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(count(data_sample[data_sample$Income>50000,]), data_sample$Income , p=0.5, alternative = "greater")
prop.test(173,300,p=0.5,alternative="greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(data_sample$Income[data_sample$Income>50000,], data_sample$Income , p=0.5, alternative = "greater")
data_sample[data_sample$Income>50000,]
data_sample$Income
prop.test(173,300,p=0.5,alternative="greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(data_sample[data_sample$Income>50000,], data_sample$Income , p=0.5, alternative = "greater")
data_sample$Income[data_sample$Income>50000,]
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(data_sample[data_sample$Income>50000,], data_sample$Income , p=0.5, alternative = "greater")
#9.11 Testing a proportion:
# H0: Q = 50.000
# Hs: Q > 50.000 {geliri 50.000 den fazla olanları bulmak için kurduğumuz seçenek hipotezi}
prop.test(173,300,p=0.5,alternative="greater")
data_sample[data_sample$Income>50000]
data_sample[data_sample$Income>50000,]
data_sample[data_sample$Income>50000,][,Income]
prop.test(data_sample[data_sample$Income>50000,][,data_sample$Income])
data_sample[data_sample$Income>50000,][,data_sample$Income]
#9.12 Comparing the Locations of Two Samples Nonparametrically:
sample_1 <- data_sample$MntMeatProducts
sample_2 <- data_sample$MntFishProducts
#9.12 Comparing the Locations of Two Samples Nonparametrically:
sample_1 <- as.data.frame(list(data_sample$MntMeatProducts))
sample_2 <- as.data.frame(list(data_sample$MntFishProducts))
sample_1
library(dplyr)  #verileri manipüle edebilmek için kullandık
colnames(sample_1) <- income
colnames(sample_1) <- c("income")
colnames(sample_2) <- c("income")
sample_2
shapiro.test(sample_1$income)
colnames(sample_1) <- c("meat")
colnames(sample_2) <- c("fish")
shapiro.test(sample_1$meat)
shapiro.test(sample_2$fish)
edit("C:\Users\lenovo\Desktop\Data_Camp\mpg.xlsx")
#H0: balık satışı ile et satışı arasında fark yoktur.
#Hs: balık satışı ile et satışı arasında fark vardır.
wilcox.test(sample_1,sample_2, alternative = "two.sided")
#H0: balık satışı ile et satışı arasında fark yoktur.
#Hs: balık satışı ile et satışı arasında fark vardır.
wilcox.test(sample_1$meat,sample_2$fish, alternative = "two.sided")
sample_meat <- as.data.frame(list(data_sample$MntMeatProducts))
colnames(sample_1) <- c("meat")
sample_fish <- as.data.frame(list(data_sample$MntFishProducts))
colnames(sample_2) <- c("fish")
shapiro.test(sample_meat$meat)#p<alpha=0.05 için normal dağılmıyor
shapiro.test(sample_fish$fish)#p<alpha=0.05 için normal dağılmıyor
#H0: balık satışı ile et satışı arasında fark yoktur.
#Hs: balık satışı ile et satışı arasında fark vardır.
wilcox.test(sample_1$meat,sample_2$fish, alternative = "two.sided")
#9.17 Testing a Correlation for Significance:
sample_wine <- data_sample$MntWines
#9.17 Testing a Correlation for Significance:
sample_wine <- as.data.frame(list(data_sample$MntWines))
colnames(sample_wine) <- c("wine")
sample_wine <- as.data.frame(list(data_sample$MntWines))
colnames(sample_wine) <- c("wine")
sample_income <- as.data.frame(list(data_sample$Income))
colnames(sample_income) <- c("income")
cor.test(sample_income,sample_wine)
cor.test(sample_income$income,sample_wine$wine)
#9.18 Testing Groups for Equal Proportions
data_sample[data_sample$Income>50000,]
#9.18 Testing Groups for Equal Proportions
data_sample[data_sample$Income>80000,] #
#9.18 Testing Groups for Equal Proportions
data_sample[data_sample$Income>60000,] #
#9.18 Testing Groups for Equal Proportions
data_sample[data_sample$NumWebPurchases>3,] #135
163/300
data_sample[data_sample$NumStorePurchases>5]
data_sample[data_sample$NumStorePurchases>5,]
143/300
#H0: Aylık web sitesi ziyaretinin 3 ten fazla olma olasılığı ile aylık dükkan ziyaretinin 5 ten fazla olma olasılığı eştittir.
#Hs: P~web~ < P~store~
prop.test(163,300,p=0.5)
prop.test(143,300,p=0.5)
#9.19 Performing Pairwise Comparisons Between Group Means
#H0: M1 = M2
#Hs: M1 != M2
sample_fruit <- data_sample[data_sample$MntFruits]
#9.19 Performing Pairwise Comparisons Between Group Means
#H0: M1 = M2
#Hs: M1 != M2
sample_fruit <- data_sample[data_sample$MntFruits,]
sample_sweet <- data_sample[data_sample$MntSweetProducts,]
pairwise.t.test(sample_fruit,sample_sweet)
sample_fruit
sample_wine
#9.19 Performing Pairwise Comparisons Between Group Means
#H0: M1 = M2
#Hs: M1 != M2
sample_fruit <- as.data.frame(list(data_sample$MntFruits))
sample_sweet <- as.data.frame(list(data_sample$MntSweetProducts))
pairwise.t.test(sample_fruit$,sample_sweet)
colnames(sample_fruit) <- c("fruit")
colnames(sample_fruit) <- c("sweet")
pairwise.t.test(sample_fruit,sample_sweet)
colnames(sample_fruit) <- c("fruit")
colnames(sample_sweet) <- c("sweet")
pairwise.t.test(sample_fruit$fruit,sample_sweet$sweet)
sample_sweet
sample_fruit
pairwise.t.test(sample_fruit$fruit,sample_sweet$sweet)
?pairwise.t.test
pairwise.t.test(sample_fruit$fruit,sample_sweet$sweet, alternative = "two.sided")
sample_fruit <- as.data.frame(list(sample(data_sample$MntFruits,30)))
colnames(sample_fruit) <- c("fruit")
sample_sweet <- as.data.frame(list(sample(data_sample$MntSweetProducts,30)))
colnames(sample_sweet) <- c("sweet")
pairwise.t.test(sample_fruit$fruit,sample_sweet$sweet, alternative = "two.sided")
pairwise.t.test(sample_fruit$fruit,sample_sweet$sweet, alternative = "two.sided")
pairwise.t.test(sample_fruit,sample_sweet, alternative = "two.sided")
pairwise.t.test(sample_fruit$fruit,sample_sweet$sweet, alternative = "two.sided")
pairwise.t.test(sample_fruit$fruit,sample_sweet$sweet, alternative = "two.sided")
pairwise.t.test(data_sample$MntMeatProducts,data_sample$MntFishProducts, alternative = "two.sided")
#9.20 Testing Two Samples for the Same Distribution
ks.test(data_sample$MntFishProducts,data_sample$MntFruits)
#9.20 Testing Two Samples for the Same Distribution
ks.test(data_sample$MntFishProducts,data_sample$MntFruits)
#9.20 Testing Two Samples for the Same Distribution
#H0: Dağılımlar aynıdır.
#Hs: Dağılımlar aynı değildir.
shapiro.test(data_sample$MntFruits)
shapiro.test(data_sample$MntFishProducts)
pairwise.t.test(data_sample$MntMeatProducts,data_sample$MntFishProducts, alternative = "two.sided")
data_sample
library(dplyr)  #verileri manipüle edebilmek için kullandık
kid_0_1 <- data_Sample$Kidhome[data_sample$Kidhome>0]
data_sample
kid_0_1 <- data_sample$Kidhome[data_sample$Kidhome>0]
kid_0_1 <- as.data.frame(list(data_sample$Kidhome[data_sample$Kidhome>0]))
View(kid_0_1)
colnames(kid_0_1) <- c("var_yok")
Data_sample %>%
add_column(kid_0_1=kid_0_1)
Data_sample %>%
add_column(kid_0_1=kid_0_1)
Data_sample %>%
add_colum(kid_0_1=kid_0_1)
?t.test
data_sample %>%
add_column(kid_0_1=kid_0_1)
data_sample %>%
mutate(kid_0_1=kid_0_1)
#Çocuk var yok sütunu ekleme:
kid_0_1 <- as.data.frame(list(ifelse(data_sample$Kidhome[data_sample$Kidhome>0],1,0)))
View(kid_0_1)
kid_0_1 <- as.data.frame(list(data_sample$Kidhome[data_sample$Kidhome>0]))
colnames(kid_0_1) <- c("var_yok")
View(kid_0_1)
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl)
knitr::opts_chunk$set(echo = TRUE)
summary(data_sample)
summary(table(data_sample$MntWines,data_sample$MntFruits))
quantile(data_sample$Income, na.rm=T)
data_sample
knitr::opts_chunk$set(echo = TRUE)
#T testini yapabilmek için 36. satırdaki 3 değişkeni yokettik.
t.test(data_sample_30_dbl$Income)
prop.test(nrow(data_sample[data_sample$Income>50000,]),300,p=0.5,alternative="greater")
prop.test(nrow(data_sample[data_sample$Income>50000,]),nrow(data_Sample$Income),p=0.5,alternative="greater")
prop.test(nrow(data_sample[data_sample$Income>50000,]),nrow(data_sample$Income),p=0.5,alternative="greater")
prop.test(nrow(data_sample[data_sample$Income>50000,]),300,p=0.5,alternative="greater")
sample_meat <- as.data.frame(list(data_sample$MntMeatProducts))
colnames(sample_meat) <- c("meat")
sample_fish <- as.data.frame(list(data_sample$MntFishProducts))
colnames(sample_fish) <- c("fish")
wilcox.test(sample_meat$meat,sample_fish$fish, alternative = "two.sided") #p<0.05 için H0 reddedilir.
#H0: Aylık web sitesi ziyaretinin 3 ten fazla olma olasılığı ile aylık dükkan ziyaretinin 5 ten fazla olma olasılığı eştittir.
#Hs: P~web~ < P~store~
prop.test(nrow(data_sample[data_sample$NumWebPurchases>3,]),300,p=0.5)
prop.test(nrow(data_sample[data_sample$NumWebPurchases>3,]),300,p=0.5)
prop.test(nrow(data_sample[data_sample$NumStorePurchases>5,]),300,p=0.5)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_dark()
library(ggplot2)
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_dark()
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_bw()
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_classic()
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_bw()
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_bw() +
geom_text(x="Education", y="Income")
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_bw() + geom_text(aes(label = replace(data_sample$Education, data_sample$Income == "Education", "Income")))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_bw() +
labs(title = "Yıllara göre gelir düzeyindeki değişim",
x = "yıllar",
y = "gelirler")
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_bw() +
labs(title = "Income change by education level ",
x = "Education",
y = "Incomes")
ggplot(data_sample, aes(data_sample$Education, data_sample$Income, color=data_sample$Education)) +
geom_point() +
theme_bw() +
labs(title = "Income change by education level ",
x = "Education",
y = "Incomes")
attach(data_sample)
attach(data_sample)
ggplot(data_sample, aes(Education, Income, color=Education)) +
geom_point() +
theme_bw() +
labs(title = "Income change by education level ",
x = "Education",
y = "Incomes")
detach(data_sample)
attach(data_sample)
ggplot(data_sample, aes(Education, Income, color=Education)) +
geom_point() +
theme_bw() +
labs(title = "Income change by education level ",
x = "Education",
y = "Incomes")
